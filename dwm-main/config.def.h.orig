/* See LICENSE file for copyright and license details. */


#include <X11/XF86keysym.h>
/* appearance */
static const unsigned int borderpx  = 1;        /* border pixel of windows */
static const unsigned int gappx     = 4;        /* gaps between windows */
static const unsigned int snap      = 30;       /* snap pixel */
static const int swallowfloating    = 0;        /* 1 means swallow floating windows by default */
// Bar :
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const int user_bh            = 24;       /* 0 means that dwm will calculate bar height, >= 1 means dwm will user_bh as bar height */
// Fonts :
static const char *fonts[] = 
{
/* System Fonts : */
"JetBrains Mono:style=Bold:size=14:antialias=true:autohint=true",
//"Fantasque Sans Mono:style=Bold:size=12:antialias=true:autohint=true",
//"monospace:style=Bold:size=10:antialias=true:autohint=true"
/* Emoji & Icon Fonts : */
"JoyPixels:size=10:antialias=true:autohint=true",
"Font Awesome 6 Free Solid:pixelsize=14",
"Font Awesome 6 Brands:pixelsize=14",
"Material Design Icons-Regular:pixelsize=15:antialias=true:autohint=true",
"Sanskrit2003:pixelsize=20:antialias=true:autohint=true",
/* Nerd Fonts : */
"JetBrainsMono Nerd Font:style=Bold:size=10:antialias=true:autohint=true",
//"FantasqueSansMono Nerd Font:style=Bold:size=12:antialias=true:autohint=true",
//"Roboto Mono for Powerline:pixelsize=14:antialias=true:autohint=true",
//"SauceCodePro Nerd Font Mono:weight=bold:pixelsize=10:antialias=true:hinting=true",
};


/* Theme */
//#include "themes/sweetmars.h"
//#include "themes/hornet.h"
//#include "themes/dark.h"
//#include "themes/darcula.h"
//#include "themes/cherryblossom .h"
#include "themes/gruvbox.h"
//#include "themes/tomorrow.h"
// #include "themes/tomorrow-dark.h"
//#include "themes/tomorrow-night.h"
//#include "themes/tomorrow-magenta.h"
//#include "themes/tomorrow-cyan.h"
//#include "themes/vacuous.h"

static const char *colors[][3]      = {
	/*               fg         bg         border   */
	[SchemeNorm] = { col_3, col_1, col_2 },
	[SchemeSel]  = { col_4, col_1, col_4 },
	[SchemeStatus]  = { col_3, col_1, col_1 }, // Statusbar right {text,background,not used but cannot be empty}
	[SchemeTagsSel]  = { col_1, col_4, col_4 }, // Tagbar left selected {text,background,not used but cannot be empty}
    [SchemeTagsNorm]  = { col_3, col_1, col_1 }, // Tagbar left unselected {text,background,not used but cannot be empty}
    [SchemeInfoSel]  = { col_4, col_1, col_4 }, // infobar middle  selected {text,background,not used but cannot be empty}
    [SchemeInfoNorm]  = { col_3, col_1, col_1 }, // infobar middle  unselected {text,background,not used but cannot be empty}
};

/* tagging */
static const char *tags[] = { "❶", "❷", "❸", "❹", "❺", "❻" };
// static const char *tags[] = { "󰎤 : 󰞷", "󰎧 : 󰨞", "󰎪 : 󰀶", "󰎭 : 󰈹", "󰎱 : 󱓥", "󰎳 : 󰏆", "󰎶 : 󰈦", "󰎹 : 󰓓", "󰎼 : 󰒓","󰽽 : 󰣨" };
// static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
//static const char *tags[] = { "", "", "", "", "", "", "", "", "" };
//static const char *tags[] = { "dev", "www", "sys", "doc", "vbox", "chat", "mus", "vid", "gfx" }; 
//static const char *tags[] = {"", "", "", "","", "", "", "", "", "", ""};
//static const char *tags[] = { "I", "II", "III", "IV", "V", "VI" };
//static const char *tags[] = {"", "", "", "", "", "", "", "", ""};
//static const char *tags[] = { "", "", "", "", "", "", "", "", "" };
//static const char *tags[] = {"", "", "", "", "", "", "", "", ""};
//static const char *tags[] = { "一", "二", "三", "四", "五", "六", "七", "八", "九" };
//static const char *tags[] = {"", "", "", "", "", "", "", "", ""};
// static const char *tags[] = {"", "", "", "", "", "", "", "", ""};
// Underline Tags :
static const unsigned int ulinepad	= 5;	/* horizontal padding between the underline and tag */
static const unsigned int ulinestroke	= 2;	/* thickness / height of the underline */
static const unsigned int ulinevoffset	= 0;	/* how far above the bottom of the bar the line should appear */
static const int ulineall = 0;	/* 1 to show underline on all tags, 0 for just the active ones */

// Rules :
static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class     instance  title           tags mask  isfloating  isterminal  noswallow  monitor */
	{ "Gimp",    NULL,     NULL,           0,         1,          0,           0,        -1 },
	{ "Firefox", NULL,     NULL,           1 << 8,    0,          0,          -1,        -1 },
	{ "St",      NULL,     NULL,           0,         0,          1,           0,        -1 },
	{ NULL,      NULL,     "Event Tester", 0,         0,          0,           1,        -1 }, /* xev */
};

/* layout(s) */
static const float mfact     = 0.50; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */

#include "fibonacci.c"
#include "layouts.c"
static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[]=",      tile },    /* first entry is default */
	{ "><>",      NULL },    /* no layout function means floating behavior */
	{ "[M]",      monocle },
	// fibonacci
	{ "[@]",      spiral },
 	{ "[\\]",      dwindle },
 	// grid :
 	{ "HHH",      grid },
	// bstack
	{ "TTT",      bstack },
	{ "===",      bstackhoriz },
 	// centermaster : 
	{ "|M|",      centeredmaster },
	{ ">M>",      centeredfloatingmaster },
	{ NULL,       NULL },
};

/* key definitions */
//#define MODKEY Mod1Mask // ALT key
#define MODKEY Mod4Mask		// Win key
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "Run : ", NULL };
static const char *termcmd[]  = { "kitty", NULL };
/* Programs */
static const char *alacritty[]  = { "alacritty", NULL };
static const char *terminator[]  = { "terminator", NULL };
static const char *filemgr[]  = { "pcmanfm", NULL };
static const char *roficmd[] = { "rofi", "-show", "run", "-show-icons", NULL };

/*Screen Light */
static const char *brupcmd[] = { "brightnessctl", "set", "5%+", NULL };
static const char *brdowncmd[] = { "brightnessctl", "set", "5%-", NULL };

/* Volume */
static const char *upvol[]   = { "pamixer", "-i", "5", NULL };
static const char *downvol[] = { "pamixer", "-d", "5", NULL };
static const char *mutevol[] = { "pamixer", "-t" };

/* Media Controls */
static const char *medpause[]   = { "playerctl", "play-pause", NULL };
static const char *mednext[] = { "playerctl", "next", NULL };
static const char *medprevious[] = { "playerctl", "previous", NULL };


#include "movestack.c"
static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_r,      spawn,          {.v = dmenucmd } },
	{ MODKEY,             			XK_Return, spawn,          {.v = termcmd } },
 //    // Light :
	// { 0, XF86XK_MonBrightnessUp,               spawn,          {.v = brupcmd } },
 //    { 0, XF86XK_MonBrightnessDown,             spawn,          {.v = brdowncmd } },
 //    
 //    // Volume :
 //    { 0, XF86XK_AudioMute, 					   spawn, 		   {.v = mutevol } },
	// { 0, XF86XK_AudioLowerVolume,              spawn,          {.v = downvol } },
	// { 0, XF86XK_AudioRaiseVolume,              spawn,          {.v = upvol } },
	// 
	// // Media Controls :
 //    { 0, XF86XK_AudioPlay, 					   spawn, 		   {.v = medpause } },
	// { 0, XF86XK_AudioNext,              		   spawn,      {.v = mednext } },
	// { 0, XF86XK_AudioPrev,              		   spawn,      {.v = medprevious } },
	
	{ MODKEY,                       XK_b,      togglebar,      {0} },
	// focusstack :
	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	// movestack :
	{ MODKEY|ShiftMask,             XK_j,      movestack,      {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_k,      movestack,      {.i = -1 } },
	
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
	{ MODKEY|ShiftMask,             XK_Tab,    zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY,                       XK_c,      killclient,     {0} },
	// Layouts :
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	// fibonacci
	// { MODKEY,                       XK_r,      setlayout,      {.v = &layouts[3]} },	
	// { MODKEY|ShiftMask,             XK_r,      setlayout,      {.v = &layouts[4]} },
	// grid :
	{ MODKEY,                       XK_g,      setlayout,      {.v = &layouts[5]} },
	// bottomstack :
	{ MODKEY,                       XK_u,      setlayout,      {.v = &layouts[6]} },
	{ MODKEY,                       XK_o,      setlayout,      {.v = &layouts[7]} },
	// centeredmaster :
	{ MODKEY,                       XK_n,      setlayout,      {.v = &layouts[8]} },
	{ MODKEY|ShiftMask,             XK_n,      setlayout,      {.v = &layouts[9]} },
	// cyclelayout :
	{ ControlMask,					XK_comma,  cyclelayout,    {.i = -1 } },
	{ ControlMask,           		XK_period, cyclelayout,    {.i = +1 } },
	// setlayout :
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_agrave, view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_agrave, tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_semicolon, focusmon,    {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_semicolon, tagmon,      {.i = +1 } },
	TAGKEYS(			XK_1,		0)
 	TAGKEYS(			XK_2,		1)
	TAGKEYS(			XK_3,		2)
	TAGKEYS(			XK_4,		3)
	TAGKEYS(			XK_5,		4)
  TAGKEYS(			XK_6,		5)
	TAGKEYS(			XK_7,		6)
	TAGKEYS(			XK_8,		7)
	TAGKEYS(			XK_9,		8)

	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

